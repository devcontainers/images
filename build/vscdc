#!/usr/bin/env node
/*--------------------------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See https://go.microsoft.com/fwlink/?linkid=2090316 for license information.
 *-------------------------------------------------------------------------------------------------------------*/

const path = require('path');
const push = require('./src/push').push;
const patch = require('./src/patch');
const generateImageInformationFiles = require('./src/image-info').generateImageInformationFiles;
const configUtils = require('./src/utils/config');
const packageJson = require('../package.json');

console.log('devcontainers CLI\nCopyright (c) Microsoft Corporation. All rights reserved.\n')

require('yargs')
    .command('push [devcontainer]', 'push dev container images to a repository', (yargs) => {
        yargs
            .positional('devcontainer', {
                describe: 'ID of dev container to push',
                default: null
            })
            .options({
                'release': {
                    describe: 'devcontainers release tag or branch',
                    default: `v${packageJson.version}`
                },
                'registry': {
                    describe: 'container registry to push images to',
                    default: configUtils.getConfig('containerRegistry', 'docker.io')
                },
                'registry-path': {
                    describe: 'container registry path',
                    default: configUtils.getConfig('containerRegistryPath', '')
                },
                'stub-registry': {
                    describe: 'registry to add to stub',
                    default: configUtils.getConfig('stubRegistry',
                        configUtils.getConfig('containerRegistry', 'docker.io'))
                },
                'stub-registry-path': {
                    describe: 'stub registry path',
                    default: configUtils.getConfig('stubRegistryPath',
                        configUtils.getConfig('containerRegistryPath', ''))
                },
                'github-repo': {
                    describe: 'devcontainers repo name',
                    default: configUtils.getConfig('githubRepoName', 'microsoft/devcontainers')
                },
                'update-latest': {
                    describe: 'whether to tag latest and {MAJOR} if pushing',
                    type: 'boolean',
                    default: true
                },
                'prep-only': {
                    describe: 'prep the containers for build/push, but do not actually do it',
                    type: 'boolean',
                    default: false
                },
                'push': {
                    describe: 'whether to push after prep/build',
                    type: 'boolean',
                    default: true
                },
                'page': {
                    describe: 'Page number (of total) to push',
                    type: 'integer',
                    default: 1
                },
                'page-total': {
                    describe: 'Total number of pages to use when parallelizing builds',
                    type: 'integer',
                    default: 1
                },
                'replace-images': {
                    describe: 'Whether to replace released images. Does not apply to dev tag.',
                    type: 'boolean',
                    default: false
                },
                'skip': {
                    describe: 'A space separated list of image names to skip building and pushing.',
                    type: 'array',
                    default: []
                },
                'secondary-registry-path': {
                    describe: 'Secondary container registry path',
                    default: configUtils.getConfig('secondaryContainerRegistryPath', '')
                }
            })
    }, pushCommand)
    .command('cg [devcontainer]', 'generate cgmanifest.json', (yargs) => {
        yargs
            .positional('devcontainer', {
                describe: 'limits manifest generation to single image',
                default: null
            })
            .options({
                'release': {
                    describe: 'devcontainers release tag or branch',
                    default: 'main'
                },
                'registry': {
                    describe: 'container registry to push images to',
                    default: configUtils.getConfig('containerRegistry', 'docker.io')
                },
                'registry-path': {
                    describe: 'container registry path',
                    default: configUtils.getConfig('containerRegistryPath', '')
                },
                'stub-registry': {
                    describe: 'registry to add to stub',
                    default: configUtils.getConfig('stubRegistry',
                        configUtils.getConfig('containerRegistry', 'docker.io'))
                },
                'stub-registry-path': {
                    describe: 'stub registry path',
                    default: configUtils.getConfig('stubRegistryPath',
                        configUtils.getConfig('containerRegistryPath', ''))
                },
                'github-repo': {
                    describe: 'devcontainers repo name',
                    default: configUtils.getConfig('githubRepoName', 'microsoft/devcontainers')
                },
                'build': {
                    describe: 'whether to to build the image first step',
                    type: 'boolean',
                    default: true
                },
                'prune': {
                    describe: 'whether to prune images',
                    type: 'boolean',
                    default: false
                },
                'cg': {
                    describe: 'whether to generate cgmanifest.json',
                    type: 'boolean',
                    default: true
                },
                'markdown': {
                    describe: 'whether to generate markdown files in history folders',
                    type: 'boolean',
                    default: false
                },
                'output-path': {
                    describe: 'path to where extracted information should be stored',
                    default: path.resolve(__dirname, '..', configUtils.getConfig('informationFileOutputPath', '.'))
                },
                'overwrite': {
                    describe: 'whether to overwrite cgmanifest.json or markdown files',
                    type: 'boolean',
                    default: true
                }
            })
    }, imageInfoCommand)
    .command('info [devcontainer]', 'generate image information files', (yargs) => {
        yargs
            .positional('devcontainer', {
                describe: 'limits manifest generation to single image',
                default: null
            })
            .options({
                'release': {
                    describe: 'devcontainers release tag or branch',
                    default: 'main'
                },
                'registry': {
                    describe: 'container registry to push images to',
                    default: configUtils.getConfig('containerRegistry', 'docker.io')
                },
                'registry-path': {
                    describe: 'container registry path',
                    default: configUtils.getConfig('containerRegistryPath', '')
                },
                'stub-registry': {
                    describe: 'registry to add to stub',
                    default: configUtils.getConfig('stubRegistry',
                        configUtils.getConfig('containerRegistry', 'docker.io'))
                },
                'stub-registry-path': {
                    describe: 'stub registry path',
                    default: configUtils.getConfig('stubRegistryPath',
                        configUtils.getConfig('containerRegistryPath', ''))
                },
                'github-repo': {
                    describe: 'devcontainers repo name',
                    default: configUtils.getConfig('githubRepoName', 'microsoft/devcontainers')
                },
                'build': {
                    describe: 'whether to to build the image first step',
                    type: 'boolean',
                    default: true
                },
                'cg': {
                    describe: 'whether to generate cgmanifest.json',
                    type: 'boolean',
                    default: false
                },
                'markdown': {
                    describe: 'whether to generate markdown files in history folders',
                    type: 'boolean',
                    default: true
                },
                'prune': {
                    describe: 'whether to prune images',
                    type: 'boolean',
                    default: false
                },
                'output-path': {
                    describe: 'path to where extracted information should be stored',
                    default: path.resolve(__dirname, '..', configUtils.getConfig('informationFileOutputPath', '.'))
                },
                'overwrite': {
                    describe: 'whether to overwrite cgmanifest.json or markdown files',
                    type: 'boolean',
                    default: false
                }
            })
    }, imageInfoCommand)
    .command('patch', 'patch existing images', (yargs) => {
        yargs
            .options({
                'all': {
                    describe: 'run all patches not already complete',
                    type: 'boolean',
                    default: false
                },
                'patch-path': {
                    describe: 'path to the folder containing the patch files',
                    default: '.'
                },
                'registry': {
                    describe: 'container registry to push images to',
                    default: configUtils.getConfig('containerRegistry', 'docker.io')
                },
                'registry-path': {
                    describe: 'container registry path',
                    default: configUtils.getConfig('containerRegistryPath', '')
                }
            })
    }, patchCommand)
    .demandCommand()
    .help()
    .argv;

function pushCommand(argv) {
    push(argv.githubRepo, argv.release, argv.updateLatest, argv.registry, argv.registryPath, argv.stubRegistry,
        argv.stubRegistryPath, argv.push, argv.prepOnly, argv.skip, argv.page, argv.pageTotal, argv.replaceImages, argv.devcontainer, argv.secondaryRegistryPath)
        .catch((reason) => {
            console.error(`(!) Push failed - ${reason}`);
            if(reason.stack) {
                console.error(`    ${reason.stack}`);
            }
            process.exit(1);
        });
}

function imageInfoCommand(argv) {
    generateImageInformationFiles(argv.githubRepo, argv.release, argv.registry, argv.registryPath, argv.stubRegistry, argv.stubRegistryPath, 
        argv.build, argv.prune, argv.cg, argv.markdown, argv.overwrite, argv.outputPath, argv.devcontainer)
        .catch((reason) => {
            console.error(`(!) Image information file generation failed - ${reason}`);
            if(reason.stack) {
                console.error(`    ${reason.stack}`);
            }
            process.exit(1);
        });
}

function patchCommand(argv) {
    if (argv.all) {
        patch.patchAll(argv.registry, argv.registryPath)
            .catch((reason) => {
                console.error(`(!) Patching failed - ${reason}`);
                if(reason.stack) {
                    console.error(`    ${reason.stack}`);
                }    
                process.exit(1);
            });
    } else {
        patch.patch(argv.patchPath, argv.registry, argv.registryPath)
            .catch((reason) => {
                console.error(`(!) Patching failed - ${reason}`);
                if(reason.stack) {
                    console.error(`    ${reason.stack}`);
                }    
                process.exit(1);
            });
    }
}
